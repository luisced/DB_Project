from rest_framework.response import Response
from rest_framework.decorators import api_view
from rest_framework.pagination import PageNumberPagination
from django.db.models import Count, F
from django.db import models
from ..serializers.cyberAttack_serializers import CyberAttackSerializer, AfectedUserSerializer, DeviceSerializer, GeolocalizationSerializer
from ..models import CyberAttack, AfectedUser, Device, Geolocalization

# GET all cyberAttacks
@api_view(['GET'])
def get_cyberAttacks(request):
    cyberAttacks = CyberAttack.objects.all()
    paginator = PageNumberPagination()
    paginator.page_size = 100
    result_page = paginator.paginate_queryset(cyberAttacks, request)
    serializer = CyberAttackSerializer(result_page, many=True)
    return paginator.get_paginated_response(serializer.data)

# GET single cyberAttack
@api_view(['GET'])
def get_cyberAttack(request, pk):
    try:
        cyberAttack = CyberAttack.objects.get(pk=pk)
        serializer = CyberAttackSerializer(cyberAttack, many=False)
        return Response(serializer.data)
    except CyberAttack.DoesNotExist:
        return Response({'error': 'CyberAttack not found'}, status=404)

# Frequency of Each Type of Attack
@api_view(['GET'])
def atypeFrequency(request):
    attackTypes = CyberAttack.objects.values('attackType').annotate(count=Count('attackType')).order_by('-count')
    return Response(attackTypes)

# Severity Levels of Attacks Over Time
@api_view(['GET'])
def severityOverTime(request):
    severityLevels = CyberAttack.objects.annotate(date=models.functions.TruncDay('timestamp')).values('date', 'severityLevel').annotate(count=Count('id')).order_by('date', 'severityLevel')
    return Response(severityLevels)

# Devices Most Attacked
@api_view(['GET'])
def mostAttackedDevices(request):
    devices = CyberAttack.objects.values('device__web_browser', 'device__operative_system').annotate(count=Count('device')).order_by('-count')
    paginator = PageNumberPagination()
    paginator.page_size = 10
    result_page = paginator.paginate_queryset(devices, request)
    return paginator.get_paginated_response(result_page)

# IDS/IPS Alerts Detection
@api_view(['GET'])
def idsIpsAlerts(request):
    idsIps = CyberAttack.objects.values('idsIpsAlerts').annotate(count=Count('idsIpsAlerts')).order_by('-count')
    return Response(idsIps)

# Geographical Distribution of Attacks
@api_view(['GET'])
def geoLocation(request):
    geoLocations = CyberAttack.objects.values('geoLocation__city').annotate(count=Count('geoLocation')).order_by('-count')
    return Response(geoLocations)

# Correlation Between Attack Type and Action Taken
@api_view(['GET'])
def attackAction(request):
    attackActions = CyberAttack.objects.values('attackType', 'actionTaken').annotate(count=Count('attackType')).order_by('attackType', 'actionTaken')
    return Response(attackActions)

# Protocol Usage Frequency
@api_view(['GET'])
def protocolFrequency(request):
    protocols = CyberAttack.objects.values('protocol').annotate(count=Count('protocol')).order_by('-count')
    return Response(protocols)

# Alerts and Warnings Generated by Attacks
@api_view(['GET'])
def alertsWarnings(request):
    alerts = CyberAttack.objects.values('alertsWarnings').annotate(count=Count('alertsWarnings')).order_by('-count')
    return Response(alerts)

# GET all affectedUsers
@api_view(['GET'])
def get_afectedUsers(request):
    afectedUsers = AfectedUser.objects.all()
    paginator = PageNumberPagination()
    paginator.page_size = 500
    result_page = paginator.paginate_queryset(afectedUsers, request)
    serializer = AfectedUserSerializer(result_page, many=True)
    return paginator.get_paginated_response(serializer.data)

# GET all devices
@api_view(['GET'])
def get_devices(request):
    devices = Device.objects.all()
    paginator = PageNumberPagination()
    paginator.page_size = 500
    result_page = paginator.paginate_queryset(devices, request)
    serializer = DeviceSerializer(result_page, many=True)
    return paginator.get_paginated_response(serializer.data)

# GET all geolocalizations
@api_view(['GET'])
def get_geolocalizations(request):
    geolocalizations = Geolocalization.objects.all()
    paginator = PageNumberPagination()
    paginator.page_size = 500
    result_page = paginator.paginate_queryset(geolocalizations, request)
    serializer = GeolocalizationSerializer(result_page, many=True)
    return paginator.get_paginated_response(serializer.data)


@api_view(['GET'])
def unalerted_attacks_by_country(request):
    # Query to fetch and aggregate unalerted attacks by country
    attacks_data = CyberAttack.objects.filter(
        alertsWarnings=False,
        geoLocation__isnull=False
    ).values(
        country=F('geoLocation__locality')  # Corrected to use 'locality'
    ).annotate(
        count=Count('id')
    ).order_by('-count')

    return Response(attacks_data)

@api_view(['GET'])
def attack_types_by_country(request):
    # Correctly using .values() for grouping and .annotate() for counting
    attack_types_data = CyberAttack.objects.filter(
        alertsWarnings=False,
        geoLocation__isnull=False
    ).values(
        'geoLocation__locality',  # Directly specify the field for grouping
        'attackType'  # Directly specify the field for additional grouping
    ).annotate(
        count=Count('id')  # Only use aggregate functions in annotate
    ).order_by('geoLocation__locality', '-count')

    # Reformatting the data for better JSON structure
    result = {}
    for item in attack_types_data:
        country = item['geoLocation__locality']  # Use the correct field name from values
        attack_type = item['attackType']  # Use the correct field name from values
        if country not in result:
            result[country] = []
        result[country].append({attack_type: item['count']})
        
    return Response(result)

